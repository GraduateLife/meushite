[{"title":"Ola Mundo","content":"OlÃ¡ Mundo! (Hello World!)\nWelcome to my page\nThis is a sample markdown page that demonstrates various markdown features.\nText Formatting\nYou can write text in bold, italic, or both. You can also use ~~strikethrough~~ text.\nLists\nHere's an unordered list:\nFirst item\nSecond item\nThird item with a link\nNumbered list:\n1. First step\n2. Second step\n3. Third step\nCode Example\nHere's an inline code example: `console.log('Hello World!')`\nAnd a code block:\ndef greet():\n    print(\"Hello, World!\")\nQuote\n> This is a blockquote.\n> It can span multiple lines.\nTable\n| Header 1 | Header 2 |\n| -------- | -------- |\n| Cell 1   | Cell 2   |\n| Cell 3   | Cell 4   |","slug":"ola-mundo","keywords":["text","markdown","sample"]},{"title":"React Switch Case","content":"In React, we often find ourselves writing conditional rendering like: `{condition && <Component/>}`.\nExamples from this Website\nuse-and-operator\nuse-ternary-operator\nFrom my perspective, this pattern significantly impacts code maintainability and readability, yet such pattern has already became part of react syntax.\n> I have some thoughts about typescript as well, but we discuss that another time :)\nIs There a Better Way?\nDuring my time learning vuejs in university, I discovered its elegant solution to this problem via built-in directives. Not familiar? See the docs.\nOf course, Vue.js can implement directives easily because it is based on template. Adding directives to React would be more difficult because we are going to use babel plugins.\nSo I will use slots, or react children, and I really make it in the end!\nHere's my implementation:\nreact-switch-case\n> For the sake of shadcn/ui - I have no idea how many methods that the React instance has in last several years ðŸ˜…\nRather than using If-else blocks, I prefer switch cases for better readability. And the jsx syntax returns values, hence we no longer need to write break statements.\nHere's a working example, just like the switch-case everyone knows ðŸ˜Ž\nreact-switch-case-example","slug":"react-switch-case","keywords":[]},{"title":"Useful Links for Developers","content":"Some useful links for developers, to avoid terrible frontend codes.\nUI\nDoes anyone not know about shadcn/ui? To be honest this guy saves everyone's life :).\nHowever, shadcn is too atomic, it's not easy to use it as a full-fledged UI.\nShadcn\nThe following ui libraries are based on shadcn, but are more like normal ui libraries for developers.\nOrigin UI\nMagic UI\nAceternity UI <-this website uses it, a lot\nother recommended ui libraries, i,e, not based on shadcn\nNext UI<- not related to nextjs\nHeadless UI\nIcons\nIconify\nTabler <-I prefer this one\nHero Icons\nLucide Icons <-integrated with shadcn/ui\nReact Icons <- once popular, but now I don't use it anymore\nOther annoying stuffs\nico converter\nfavicon generator\nlooking for brand logos\nmake logo\nReact hooks\nI just recommend this one, because I don't like to write the same codes over and over again.\nreact-use\nI guess these are the all the things for frontend developers.\nAs for backend developers...\nngrok","slug":"useful-links-for-developers","keywords":["links"]},{"title":"Dotnet Cli Cheatsheet","content":"I don't like to click, I like to type (your fault, vscode)\nGeneral workflow like this\nlist all templates provided by microsoft\ndotnet new list <by template name> --tag=<tag>\ntemplate name has space, use double quotes (guess I don't need to tell you this)\nor find a template on nuget\ndotnet new search <by template name> --tag=<tag>\nCreate a new application, use short name instead of full name\ndotnet new <template short name>\n> note: unlike other cli tools, dotnet cli directly create the files and folders in your current directory, so please mkdir before you run this command\nrun application, don't have to attach path name, you go to the folder\ndotnet run\nbuild application\ndotnet build\nDotnet sdk commands\nlist all sdk versions in your machine\ndotnet --list-sdks\ndon't know why it in not like 'dotnet list sdks'\ncheck current sdk version\ndotnet --version\n> have to download sdk on this page\n>\n> or use dotnet sdk extension in vscode like I diddotnet-install-tool\nSdks are installed globally, and cli automatically switch to the latest version\nSo how to switch sdk versions?\ngo to your project root\ndotnet new globaljson\n> this command works both for new projects and for existing projects","slug":"dotnet-cli-cheatsheet","keywords":["snippets","dotnet"]}]