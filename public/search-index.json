[
  {
    "title": "Ola Mundo",
    "content": "Ol√° Mundo! (Hello World!)\nWelcome to my page\nThis is a sample markdown page that demonstrates various markdown features.\nText Formatting\nYou can write text in bold, italic, or both. You can also use ~~strikethrough~~ text.\nLists\nHere's an unordered list:\nFirst item\nSecond item\nThird item with a link\nNumbered list:\n1. First step\n2. Second step\n3. Third step\nCode Example\nHere's an inline code example: `console.log('Hello World!')`\nAnd a code block:\ndef greet():\n    print(\"Hello, World!\")\nQuote\n> This is a blockquote.\n> It can span multiple lines.\nTable\n| Header 1 | Header 2 |\n| -------- | -------- |\n| Cell 1   | Cell 2   |\n| Cell 3   | Cell 4   |",
    "slug": "ola-mundo",
    "keywords": ["text", "markdown", "sample"]
  },
  {
    "title": "A record of adding eslint to my nextjs website",
    "content": "adding eslint support to nextjs is definitely not as easy as the official claims!\nwhat happened?\nnextjs has supported eslint by default, then I thought \"maybe a just need a .eslintrc file, how hard can it be?\", then one afternoon of my life is ruined.\nI copied my .eslintrc file from my old project, and I promised I exactly followed nextjs migrate instruction\n> tldr, nextjs prompts you to extend \"next\" in your own .eslintrc.json\nthen nothing happened when I run \"pnpm run lint\", nextjs has no idea about my .eslintrc.json file.\nthis popped up\n ‚ö† The Next.js plugin was not detected in your ESLint configuration. See https://nextjs.org/docs/basic-features/eslint#migrating-existing-config\nAfter ~~copying~~ referring to many stackoverflow/github issues, I decided to screw that bullcrap next lint, I do it my self!\nthese are necessary dependencies, notice they are all devDependencies\n\"@typescript-eslint/eslint-plugin\": \"^8.18.2\",\n\"@typescript-eslint/parser\": \"^8.18.2\",// to let eslint understand typescript\n\"eslint\": \"^9.17.0\",\n\"eslint-config-next\": \"^15.1.3\",// to avoid conflict with nextjs eslint config\n\"eslint-config-prettier\": \"^9.1.0\", //to avoid conflict with prettier config\n\"prettier\": \"^3.4.2\",\nthen we will be okay...?\nafter eslint 9, .eslintrc files (js or json or whatever) are not supported, which means I have to make a eslint.config.mjs instead to let eslint cli know my config file\n> is breaking changes ths mainstream in javascript? am I right, Nextjs official?\nGood news is, eslint official tells me how to migrate to the new version:\npnpx @eslint/migrate-config .eslintrc.json\nthese msgs will pop up\nMigrating .eslintrc.json\nWrote new config to ./eslint.config.mjs\nYou will need to install the following packages to use the new config:\nglobals\n@eslint/js\n@eslint/eslintrc\nYou can install them using the following command:\nnpm install globals @eslint/js @eslint/eslintrc -D\ndownload...\nactually we good,\npnpx @eslint/migrate-config .eslintrc.json && eslint --no-cache\neslint shouts, in the end.\nsetup prettier\neslint shouts when our rules are broken, but prettier fix our code (kind of)\nto introduce some plugins I am using:\n    \"prettier-plugin-organize-imports\": \"^4.1.0\",// this will conflict with eslint-import-sort, I recommend to use prettier\n    \"prettier-plugin-tailwindcss\": \"^0.6.9\",// format tw classnames\ngo to your .prettierrc,\n  \"plugins\": [\n    \"prettier-plugin-tailwindcss\",\n    \"prettier-plugin-organize-imports\"\n  ],\nrun `prettier write .` to format all the files in your project\n> why this command can run globally?\nmodify my commends\n    \"lint\": \"pnpx @eslint/migrate-config .eslintrc.json && eslint --no-cache\",\n    \"format\": \"pnpm run lint && prettier --write .\",\n> I am not getting used to the latest eslint config syntax, you can make your own's\ndon't forget to go to next.config.ts\nconst nextConfig: NextConfig = {\n  eslint: {\n    ignoreDuringBuilds: true,\n  },\n  //...\n};\nsince we run `format` every time before `build` so we don't need it anymore\ncurrently I am making it into a git hook, I will write a new blog after I made it",
    "slug": "nextjs-plus-eslint",
    "keywords": ["eslint", "nextjs", "prettier"]
  },
  {
    "title": "the correct way to download ios runtime",
    "content": "the general workflow is to download ios runtime in xcode, but xcode shouted download is failed\n> this is not only for me, lots of developers reported this issue, I think it's Apple's fault.\nthen we have to download it manually.\ngo to <https://developer.apple.com/download/all/?q=Xcode> to download ios runtime you like.\n> tips for Chinese developers, you need a ü™ú for normal access\nAfter your dmg file is downloaded, then go to your shell,\ntell which xcode to load you ios, mine is at default path\nsudo xcode-select -s /Applications/Xcode.app\nxcodebuild -runFirstLaunch\nxcrun simctl runtime add \"~/Downloads/<somewhat.dmg>\"\nthe forgoing is what Apple doc told you, but what it hasn't told you is:\nAccessing '/Users/<Username>/Downloads/<somewhat.dmg>' requires Security & Privacy approval.\nsince terminal cannot add files to disk by default,\nyou should go to your mac settings, Security & Privacy > Full disk access > Give terminal full permission\nrun those bash commands again,\nD: 134B74D0-63F2-43ED-9E2B-21B5739CA8A5 iOS (18.2 - 22C150) (Ready)\nif this pops up means you are okay\nThen you can play iphone 16 in your mac!",
    "slug": "xcode-pitfalls",
    "keywords": ["xcode", "ios runtime"]
  },
  {
    "title": "Pitfalls on orbstack proxy",
    "content": "how to set proxy to orbstack?\nWell, on my new computer I installed orbstack to ease my work, but when I was pulling a mirror, a familiar message shows up:\nError response from daemon: Get https://registry-1.docker.io/v2/: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)\ndon't need to say more, this is the classic proxy issue, let's add some proxies,\nit differs from docker/daemon.json, you should go here\nvim ~/.orbstack/config/docker.json\nadd registries just as the same as docker\n{\n    \"registry-mirrors\": [\n        \"https://<some-proxy>.com\"\n    ]\n}\nopen a new shell and pull nginx\nWell,it doesn't help, things go tricky\norbstack documents says we can also set network proxies, let's have it a try\norb config set network_proxy socks5://127.0.0.1:7890\nthis command sets proxy of terminal, I added it just in case\nexport http_proxy=socks5://127.0.0.1:7890\nsee if it is set\norb config show\nit should work, right? NO!\nthen the final resort is to add dns ip addresses to your computer\nafter add a bunch of dns records it works in the end.",
    "slug": "orbstack-pitfalls",
    "keywords": ["orbstack", "proxy"]
  },
  {
    "title": "Quick Notes",
    "content": "just some quick notes in my coding, if there is enough content, I will create a new blog for it.\nfix the eol issue\nmake a `.gitattributes`\n* text=auto eol=lf default LF\n*.{cmd,[cC][mM][dD]} text eol=crlf CRLF for cmd\n*.{bat,[bB][aA][tT]} text eol=crlf CRLF for bat\nreplace all the files with LF in old files\ngit rm --cached -r .\ngit reset --hard\nfix the revalidate issue\n[‚ùå] export const revalidate = 15*60; //error\n[‚úÖ] export const revalidate = 900; //success\nset git proxy\ngit config --global http.proxy '<http|socks5>://<hostname>:<port>'\ncannot set https proxy because git doesn't have this option\nsee the config is set or not\ngit config --global --get http.proxy",
    "slug": "quick-notes",
    "keywords": ["quick notes"]
  },
  {
    "title": "What exactly is \"use client\" in Nextjs?",
    "content": "the 'use client' directive is a confusing content in Nextjs, because it actually differs from the conventional acknowledgement to client side rendering\nHow?\nlet's make an example, you will get what I mean.\nexport const LOG = () => {\n  if (typeof window !== undefined) {\n    console.log('I am on client side');\n  }\n  if (process.env.NODE_ENV) {\n    console.log('I am on server side');\n  }\n};\nlet's use it to page component\nimport { LOG } from '@/lib/LOG';\nconst Page = () => {\n  LOG();\n};\nexport default Page;\nthe function logs both in my terminal and in my browser, it is quite reasonable because nextjs uses SSR\nlet' add 'use client' notation to the page\n'use client';\nimport { LOG } from '@/lib/LOG';\nconst Page = () => {\n  LOG();\n};\nexport default Page;\nthe function still logs in both of my terminal and my browser, but it logs twice in the browser (due to react strict mode)\nSee? 'use client' still uses SSR, hence actually the full name of 'use client' is actually 'use client feature', not 'use client rendering', that's a huge difference.\nSo why nextjs invent it?\nSee the doc.\nnextjs has two separate strategies to make it happen:\n1. Full page load:\n   nextjs renders a full page of static HTML on server side, then use js script to append browser features on client side.\n2. Subsequent navigation:\n   First, what is \"subsequent navigation\"? I believe nextjs document didn't explain it well. But it sounds like \"client navigation\" to me, probably it means the Link component in next/link. Anyway, in this case, nextjs directly sends js bundle to browser, this is the real \"client side rendering\".\nby marking 'use client' at the top of the tsx file, obviously nextjs uses the first strategy, because these components still use SSR, just like the example above.\nThen, it makes great sense to explains why nextjs mentions the unsupported pattern in using client components\nbecause initially all the components are rendered on server side, when hydration happens on client side, it means the render is done, then nextjs cannot go back to server side to handle server features. have to use the 'use server' directive to handle server features.\nKey points\n1. client components are more than the components use 'use client'\n2. the components use 'use client' are hydrated on client side\n3. the components use 'use client' are rendered on server side (at first stage)\n4. 'use server' can only be used in the components use 'use client'\nExtra\nsomebody thinks maybe it causes hydration error because of the \"use client\" directive, but actually it is not.\nconst Page = () => {\n  return (\n    <p>\n      <h3>This is index</h3>\n    </p>\n  );\n};\nThis code causes hydration error, because the this is invalid html structure (p tags can only contain inline elements, h3 is block element)",
    "slug": "client-components",
    "keywords": ["Nextjs", "use client"]
  },
  {
    "title": "Write a react switch case component",
    "content": "In React, we often find ourselves writing conditional rendering like: `{condition && <Component/>}`.\nExamples from this Website\nuse-and-operator\nuse-ternary-operator\nFrom my perspective, this pattern significantly impacts code maintainability and readability, yet such pattern has already became part of react syntax.\n> I have some thoughts about typescript as well, but we discuss that another time :)\nIs There a Better Way?\nDuring my time learning vuejs in university, I discovered its elegant solution to this problem via built-in directives. Not familiar? See the docs.\nOf course, Vue.js can implement directives easily because it is based on template. Adding directives to React would be more difficult because we are going to use babel plugins.\nSo I will use slots, or react children, and I really make it in the end!\nHere's my implementation:\nreact-switch-case\n> For the sake of shadcn/ui - I have no idea how many methods that the React instance has in last several years üòÖ\nRather than using If-else blocks, I prefer switch cases for better readability. And the jsx syntax returns values, hence we no longer need to write break statements.\nHere's a working example, just like the switch-case everyone knows üòé\nreact-switch-case-example\nGo to this link to experience\ndemo",
    "slug": "react-switch-case",
    "keywords": ["eureka moment"]
  },
  {
    "title": "Useful Links for Developers",
    "content": "Some useful links for developers, to avoid terrible frontend codes.\nUI\nDoes anyone not know about shadcn/ui? To be honest this guy saves everyone's life :).\nHowever, shadcn is too atomic, it's not easy to use it as a full-fledged UI.\nShadcn\nThe following ui libraries are based on shadcn, but are more like normal ui libraries for developers.\nOrigin UI\nMagic UI\nAceternity UI <-this website uses it, a lot\nother recommended ui libraries, i,e, not based on shadcn\nNext UI<- not related to nextjs\nHeadless UI\nIcons\nIconify\nTabler <-I prefer this one\nHero Icons\nLucide Icons <-integrated with shadcn/ui\nReact Icons <- once popular, but now I don't use it anymore\nOther annoying stuffs\nico converter\nfavicon generator\nlooking for brand logos\nmake logo\nReact hooks\nI just recommend this one, because I don't like to write the same codes over and over again.\nreact-use\nI guess these are the all the things for frontend developers.\nAs for backend developers...\nngrok",
    "slug": "useful-links-for-developers",
    "keywords": ["links"]
  },
  {
    "title": "Dotnet CLI Cheatsheet",
    "content": "I prefer typing commands over clicking (blame VSCode for that).\nGeneral Workflow\nList all templates provided by Microsoft\ndotnet new list <template name> --tag=<tag>\nFor template names with spaces, please use double quotes\nOr search for a template on NuGet\ndotnet new search <template name> --tag=<tag>\nCreate a new application using the template's short name\ndotnet new <template short name>\n> Unlike other CLI tools, the dotnet CLI creates files and folders directly in your current directory, so make sure to create a directory first before running this command.\nRun the application (navigate to the project folder first)\ndotnet run\nBuild the application\ndotnet build\n.NET SDK Commands\nList all SDK versions installed on your machine, The command structure differs from the usual pattern\ndotnet --list-sdks\nCheck current SDK version\ndotnet --version\n> You can download SDKs from the official .NET download page\n>\n> Alternatively, use the .NET SDK extension in VSCode as shown below:\n> dotnet-install-tool\nSDKs are installed globally, and the CLI automatically uses the latest version.\nHow to Switch SDK Versions\nNavigate to your project root and run:\ndotnet new globaljson\n> This command works for both new and existing projects",
    "slug": "dotnet-cli-cheatsheet",
    "keywords": ["snippets", "dotnet"]
  }
]
