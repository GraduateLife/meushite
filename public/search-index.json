[
  {
    "title": "Ola Mundo",
    "content": "Ol√° Mundo! (Hello World!)\nWelcome to my page\nThis is a sample markdown page that demonstrates various markdown features.\nText Formatting\nYou can write text in bold, italic, or both. You can also use ~~strikethrough~~ text.\nLists\nHere's an unordered list:\nFirst item\nSecond item\nThird item with a link\nNumbered list:\n1. First step\n2. Second step\n3. Third step\nCode Example\nHere's an inline code example: `console.log('Hello World!')`\nAnd a code block:\ndef greet():\n    print(\"Hello, World!\")\nQuote\n> This is a blockquote.\n> It can span multiple lines.\nTable\n| Header 1 | Header 2 |\n| -------- | -------- |\n| Cell 1   | Cell 2   |\n| Cell 3   | Cell 4   |",
    "slug": "ola-mundo",
    "keywords": ["text", "markdown", "sample"]
  },
  {
    "title": "Nextjs_plus_eslint",
    "content": "\"@typescript-eslint/eslint-plugin\": \"^8.18.2\",\n\"@typescript-eslint/parser\": \"^8.18.2\",\n\"eslint\": \"^9.17.0\",\n\"eslint-config-next\": \"^15.1.3\",\n\"eslint-config-prettier\": \"^9.1.0\",\n\"eslint-define-config\": \"^2.1.0\",\n\"prettier\": \"^3.4.2\",\n\"prettier-plugin-tailwindcss\": \"^0.6.9\",\ncreate a .prettierrc file\n{\n\"plugins\": [\"prettier-plugin-tailwindcss\"],\n...any other rules you like\n}\nand a eslintrc.js file, in my file I especially add following stuffs\n  extends: [\n    'eslint:recommended',\n    'plugin:@typescript-eslint/recommended',\n    'next',\n    'prettier',\n  ],\n  ignorePatterns: ['components/ui//*'],// shadcn components folder\nhence, when you run \"lint\", eslint shouts,\nwhat if I want to fix my documents? this is the thing goes tricky.\nyou may thought just like eslint conmands \"next lint --fix .\"? no!\nuse \"prettier --write .\" to fix your document\nthen, what if I",
    "slug": "nextjs_plus_eslint",
    "keywords": []
  },
  {
    "title": "Xcode Pitfalls",
    "content": "sudo xcode-select -s /Applications/Xcode.app\ngo to https://developer.apple.com/download/all/?q=Xcode to download ios runtime manually\nxcodebuild -runFirstLaunch\nxcrun simctl runtime add \"~/Downloads/<the dmg file name>\"\nAccessing '/Users/<Username>/Downloads/<somewhat.dmg>' requires Security & Privacy approval.\ngo to your mac, Security & Privacy > Full disk access > Give terminal full permission\n‚¨áÔ∏è means ok\nD: 134B74D0-63F2-43ED-9E2B-21B5739CA8A5 iOS (18.2 - 22C150) (Ready)",
    "slug": "xcode-pitfalls",
    "keywords": []
  },
  {
    "title": "Orbstack Pitfalls",
    "content": "how to set proxy to orbstack?\nvim ~/.orbstack/config/docker.json\norb config set network_proxy socks5://127.0.0.1:7890\nadd dns ip addresses to your mac\ndo not try to edit /etc/resolv.conf file! this is mac, not linux!",
    "slug": "orbstack-pitfalls",
    "keywords": []
  },
  {
    "title": "Quick Notes",
    "content": "just some quick notes in my coding, if there is enough content, I will create a new blog for it.\nfix the eol issue\nmake a `.gitattributes`\n* text=auto eol=lf default LF\n*.{cmd,[cC][mM][dD]} text eol=crlf CRLF for cmd\n*.{bat,[bB][aA][tT]} text eol=crlf CRLF for bat\nreplace all the files with LF in old files\ngit rm --cached -r .\ngit reset --hard\nfix the revalidate issue\n[‚ùå] export const revalidate = 15*60; //error\n[‚úÖ] export const revalidate = 900; //success\nset git proxy\ngit config --global http.proxy '<http|socks5>://<hostname>:<port>'\ncannot set https proxy because git doesn't have this option\nsee the config is set or not\ngit config --global --get http.proxy",
    "slug": "quick-notes",
    "keywords": ["quick notes"]
  },
  {
    "title": "What exactly is \"use client\" in Nextjs?",
    "content": "the 'use client' directive is a confusing content in Nextjs, because it actually differs from the conventional acknowledgement to client side rendering\nHow?\nlet's make an example, you will get what I mean.\nexport const LOG = () => {\n  if (typeof window !== undefined) {\n    console.log('I am on client side');\n  }\n  if (process.env.NODE_ENV) {\n    console.log('I am on server side');\n  }\n};\nlet's use it to page component\nimport { LOG } from '@/lib/LOG';\nconst Page = () => {\n  LOG();\n};\nexport default Page;\nthe function logs both in my terminal and in my browser, it is quite reasonable because nextjs uses SSR\nlet' add 'use client' notation to the page\n'use client';\nimport { LOG } from '@/lib/LOG';\nconst Page = () => {\n  LOG();\n};\nexport default Page;\nthe function still logs in both of my terminal and my browser, but it logs twice in the browser (due to react strict mode)\nSee? 'use client' still uses SSR, hence actually the full name of 'use client' is actually 'use client feature', not 'use client rendering', that's a huge difference.\nSo why nextjs invent it?\nSee the doc.\nnextjs has two separate strategies to make it happen:\n1. Full page load:\n   nextjs renders a full page of static HTML on server side, then use js script to append browser features on client side.\n2. Subsequent navigation:\n   First, what is \"subsequent navigation\"? I believe nextjs document didn't explain it well. But it sounds like \"client navigation\" to me, probably it means the Link component in next/link. Anyway, in this case, nextjs directly sends js bundle to browser, this is the real \"client side rendering\".\nby marking 'use client' at the top of the tsx file, obviously nextjs uses the first strategy, because these components still use SSR, just like the example above.\nThen, it makes great sense to explains why nextjs mentions the unsupported pattern in using client components\nbecause initially all the components are rendered on server side, when hydration happens on client side, it means the render is done, then nextjs cannot go back to server side to handle server features. have to use the 'use server' directive to handle server features.\nKey points\n1. client components are more than the components use 'use client'\n2. the components use 'use client' are hydrated on client side\n3. the components use 'use client' are rendered on server side (at first stage)\n4. 'use server' can only be used in the components use 'use client'\nExtra\nsomebody thinks maybe it causes hydration error because of the \"use client\" directive, but actually it is not.\nconst Page = () => {\n  return (\n    <p>\n      <h3>This is index</h3>\n    </p>\n  );\n};\nThis code causes hydration error, because the this is invalid html structure (p tags can only contain inline elements, h3 is block element)",
    "slug": "client-components",
    "keywords": ["Nextjs", "use client"]
  },
  {
    "title": "Write a react switch case component",
    "content": "In React, we often find ourselves writing conditional rendering like: `{condition && <Component/>}`.\nExamples from this Website\nuse-and-operator\nuse-ternary-operator\nFrom my perspective, this pattern significantly impacts code maintainability and readability, yet such pattern has already became part of react syntax.\n> I have some thoughts about typescript as well, but we discuss that another time :)\nIs There a Better Way?\nDuring my time learning vuejs in university, I discovered its elegant solution to this problem via built-in directives. Not familiar? See the docs.\nOf course, Vue.js can implement directives easily because it is based on template. Adding directives to React would be more difficult because we are going to use babel plugins.\nSo I will use slots, or react children, and I really make it in the end!\nHere's my implementation:\nreact-switch-case\n> For the sake of shadcn/ui - I have no idea how many methods that the React instance has in last several years üòÖ\nRather than using If-else blocks, I prefer switch cases for better readability. And the jsx syntax returns values, hence we no longer need to write break statements.\nHere's a working example, just like the switch-case everyone knows üòé\nreact-switch-case-example\nGo to this link to experience\ndemo",
    "slug": "react-switch-case",
    "keywords": ["eureka moment"]
  },
  {
    "title": "Useful Links for Developers",
    "content": "Some useful links for developers, to avoid terrible frontend codes.\nUI\nDoes anyone not know about shadcn/ui? To be honest this guy saves everyone's life :).\nHowever, shadcn is too atomic, it's not easy to use it as a full-fledged UI.\nShadcn\nThe following ui libraries are based on shadcn, but are more like normal ui libraries for developers.\nOrigin UI\nMagic UI\nAceternity UI <-this website uses it, a lot\nother recommended ui libraries, i,e, not based on shadcn\nNext UI<- not related to nextjs\nHeadless UI\nIcons\nIconify\nTabler <-I prefer this one\nHero Icons\nLucide Icons <-integrated with shadcn/ui\nReact Icons <- once popular, but now I don't use it anymore\nOther annoying stuffs\nico converter\nfavicon generator\nlooking for brand logos\nmake logo\nReact hooks\nI just recommend this one, because I don't like to write the same codes over and over again.\nreact-use\nI guess these are the all the things for frontend developers.\nAs for backend developers...\nngrok",
    "slug": "useful-links-for-developers",
    "keywords": ["links"]
  },
  {
    "title": "Dotnet CLI Cheatsheet",
    "content": "I prefer typing commands over clicking (blame VSCode for that).\nGeneral Workflow\nList all templates provided by Microsoft\ndotnet new list <template name> --tag=<tag>\nFor template names with spaces, please use double quotes\nOr search for a template on NuGet\ndotnet new search <template name> --tag=<tag>\nCreate a new application using the template's short name\ndotnet new <template short name>\n> Unlike other CLI tools, the dotnet CLI creates files and folders directly in your current directory, so make sure to create a directory first before running this command.\nRun the application (navigate to the project folder first)\ndotnet run\nBuild the application\ndotnet build\n.NET SDK Commands\nList all SDK versions installed on your machine, The command structure differs from the usual pattern\ndotnet --list-sdks\nCheck current SDK version\ndotnet --version\n> You can download SDKs from the official .NET download page\n>\n> Alternatively, use the .NET SDK extension in VSCode as shown below:\n> dotnet-install-tool\nSDKs are installed globally, and the CLI automatically uses the latest version.\nHow to Switch SDK Versions\nNavigate to your project root and run:\ndotnet new globaljson\n> This command works for both new and existing projects",
    "slug": "dotnet-cli-cheatsheet",
    "keywords": ["snippets", "dotnet"]
  }
]
